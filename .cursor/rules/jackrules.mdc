---
description: 
globs: 
---
# Cursor Rules - JTrack Development Guidelines

## Code Organization

### Directory Structure
```
src/
├── components/          # Reusable UI components
│   ├── auth/           # Authentication related components
│   ├── dashboard/      # Dashboard components
│   ├── applications/   # Job application components
│   ├── interviews/     # Interview tracking components
│   └── common/         # Shared components
├── pages/              # Route components
├── hooks/              # Custom React hooks
├── services/           # API and external services
│   └── supabase/       # Supabase related services
├── store/              # Zustand store definitions
├── types/              # TypeScript type definitions
├── utils/              # Helper functions
└── constants/          # Application constants
```

## Coding Standards

### TypeScript
- Use TypeScript for all new code
- Define interfaces for all data structures
- Use proper type annotations for function parameters and returns
- Avoid using `any` type unless absolutely necessary
- Use type guards when narrowing types

### React Components
- Use functional components with hooks
- Create small, reusable components
- Implement proper prop types using TypeScript interfaces
- Use React.memo() for performance optimization when needed
- Follow the single responsibility principle

### State Management
- Use Zustand for global state management
- Keep state minimal and normalized
- Use React Query for server state management
- Implement proper loading and error states

### Styling
- Use Chakra UI components and theme
- Create consistent spacing using theme tokens
- Maintain responsive design principles
- Use semantic color tokens from theme
- Create reusable style configurations

### File Naming
- Use PascalCase for component files
- Use camelCase for utility files
- Use kebab-case for style files
- Add `.test.tsx` suffix for test files
- Add `.types.ts` suffix for type definition files

## Git Workflow

### Branch Naming
- feature/[feature-name]
- bugfix/[bug-description]
- hotfix/[issue-description]
- release/[version-number]

### Commit Messages
Format: `<type>(<scope>): <description>`

Types:
- feat: New feature
- fix: Bug fix
- docs: Documentation changes
- style: Code style changes
- refactor: Code refactoring
- test: Adding tests
- chore: Maintenance tasks

### Pull Requests
- Create descriptive PR titles
- Add proper description of changes
- Reference related issues
- Include testing instructions
- Add screenshots for UI changes

## Testing Requirements

### Unit Tests
- Test all utility functions
- Test custom hooks
- Test component rendering
- Test state changes

### Integration Tests
- Test feature workflows
- Test API integration
- Test state management integration
- Test route transitions

### E2E Tests
- Test critical user flows
- Test authentication flows
- Test form submissions
- Test error scenarios

## Documentation

### Code Documentation
- Add JSDoc comments for functions
- Document complex algorithms
- Add inline comments for unclear code
- Document type definitions

### Component Documentation
- Document component props
- Add usage examples
- Document component variants
- Document accessibility features

## Performance Guidelines

### Optimization
- Implement proper code splitting
- Use React.lazy for route components
- Optimize images and assets
- Implement proper caching strategies
- Use proper memoization

### Security
- Implement proper authentication checks
- Sanitize user inputs
- Use environment variables for sensitive data
- Implement proper error handling
- Follow OWASP security guidelines

## Accessibility

### Requirements
- Implement proper ARIA labels
- Ensure keyboard navigation
- Maintain proper color contrast
- Support screen readers
- Test with accessibility tools

## Review Process

### Code Review Checklist
- [ ] Follows TypeScript standards
- [ ] Implements proper error handling
- [ ] Includes necessary tests
- [ ] Follows styling guidelines
- [ ] Maintains accessibility standards
- [ ] Includes documentation
- [ ] Optimized for performance
- [ ] Follows security best practices 